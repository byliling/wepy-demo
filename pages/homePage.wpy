<style lang="less">
.bg-view {
  width: 100%;
  height: 100%;
  background-color: white;
}
.loading {
  text-align: center;
  color: silver;
}
.loading-complete {
  color: silver;
  text-align: center;
}
</style>
<template>
    <scroll-view class = "article-view">
      <loading hidden="{{hiddenLoading}}">正在加载</loading>

        <repeat for="{{list}}" key="index" index="index" item="item">
            <article :item="item"></article>
        </repeat>
    </scroll-view>
    <view class="loading" hidden="{{!loadMore}}">正在载入更多...</view>
    <view class="loading-complete" hidden="{{!noMoreData}}">--已加载全部--</view>  

</template>

<script>
import wepy from 'wepy';
import Article from '../components/article';
import * as articlesApi from '../api/homePage.js';

export default class HomePage extends wepy.page {
  config = {
    navigationBarTitleText: '精选'
  };
  components = {
    article: Article
  };
  data = {
    list: [],
    hiddenLoading: false,
    loadMore: false, //"上拉加载"的变量，默认false，隐藏
    noMoreData: false //“没有数据”的变量，默认false，隐藏
  };
  methods = {
    onReachBottom() {
      if (this.list[this.list.length - 1]) {
        var lastObj = this.list[this.list.length - 1];
        var moreTime = lastObj['publishTime'];
      }
      this.loadData(moreTime);
    }
  };
  loadData(date) {
    const self = this;
    self.loadMore = true;
    const wepyReq = wepy.request({
      url: 'https://kong-https.baidao.com/hxg-cms/articles',
      data: {
        categoryIds: 182,
        pageSize: 20,
        endPublishTime: date
      }
    });
    wepyReq.then(d => {
      console.log('success');
      self.hiddenLoading = true;
      var oldArray = self.list;
      var newArray = d.data.data.list;
      if (newArray.length === 0) {
        console.log('sdhfjashdfjashdfjashdfjk');
        self.loadMore = false;
        self.noMoreData = true;
        self.$apply();
      } else {
        self.list = oldArray.concat(newArray);
        self.loadMore = false;
        self.$apply();
      }
    });
  }
  async testAsync() {
    return 'hello async';
  }
  async onLoad() {
    articlesApi
      .fetchHomePageLists({ endPublishTime: new Date().getTime() })
      .then(a => {
        console.log(a.data);
      });
    const a = await articlesApi.fetchHomePageLists({
      endPublishTime: new Date().getTime()
    });
    console.log(a);

    this.loadData(new Date().getTime());

    const result = this.testAsync();
    console.log('oooooooo' + result); //返回promise对象

    const resultThen = this.testAsync().then(v => {
      console.log('oooooooo' + result);
    });
  }
}
</script>
